global Palette  {
    out property <color> window-background: #1C1B1F;
    out property <color> widget-background: #4F378B;
    out property <color> label-color: #E6E1E5;
    out property <color> value-color: #E6E1E5;
}

global Theme {
    out property <length> label-size: 16px;
    out property <int> label-weight: 500;
    
    out property <length> value-size: 26px;
    out property <int> value-weight: 500;
}

component ValueDelegate {
    in property <string> title <=> i-title.text;
    in property <string> value <=> i-value.text;

    VerticalLayout {
        alignment: center;

        i-title := Text {
            color: Palette.label-color;
            font-size: Theme.label-size;
            font-weight: Theme.label-weight;
        }

        i-value := Text {
            color: Palette.value-color;
            font-size: Theme.value-size;
            font-weight: Theme.value-weight;
        }
    }
}


component Value {
    in property <string> title <=> i-delegate.title;
    in property <string> value <=> i-delegate.value;

    Rectangle {
        width: 100%;
        height: 100%;
        border-radius: 4px;
        background: Palette.widget-background;
    }

    i-value := HorizontalLayout {
        width: parent.width - 30px;
        
        i-delegate := ValueDelegate {
            width: parent.width;
        }
    }

}

export component MainWindow inherits Window {
    in property <int> keypresses;
    in property <int> cpu-util;
    // in property <int> failed-decodes;
    // in property <int> nacks-received;

    width: 240px;
    height: 240px;
    background: Palette.window-background;

    private property <[{title: string, value: string}]> values: [
        {title: "Keystrokes", value: keypresses},
        // {title: "Failed decodes", value: failed-decodes},
        // {title: "Nacks received", value: nacks-received},
        {title: "CPU Util", value: cpu-util},
    ];

    private property <length> item-padding: 20px;
    private property <length> item-height: (self.height - item-padding * (2 + values.length - 1)) / values.length;


    VerticalLayout { 
        padding: item-padding;
        spacing: item-padding;

        for data in values: Value {
            height: item-height;
            title: data.title;
            value: data.value;
        }
    }
}
